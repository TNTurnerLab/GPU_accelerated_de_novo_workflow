#Code by Jeffrey Ng, Turner Lab Washington University in St. Louis
#Last Date of Edit:  11/18/20

import os
#Pull variables from config file
if config == {}:
    configfile: "config.json"

REFERENCE = config["reference"]
FAMILY_FILE=config["family_file"]
FAMILY_FILE_comma=config["family_file_c"]
GLNEXUS_FILE_DV=config["glnexus_file_dv"]
GLNEXUS_FILE_HC=config["glnexus_file_hc"]
REGIONS=config["regions"]
GQ_VALUE=config["gq_value"]
DEPTH_VALUE=config["depth_value"]
OUT_DIR=config["out_dir"]

#Grab families from family input file, denoting family output files as the child's ID
FAMILIES = []
with open(FAMILY_FILE) as f:
    for line in f:
        FAMILIES.append(line.strip().split('\t')[2])
FAMILIES=["NA19778"]
GQ_VALUES=[GQ_VALUE]
DEPTH_VALUES=[DEPTH_VALUE]
print(FAMILIES)

rule all:
    input:  expand("%s/{family}/{family}.glnexus_denovo_actual.dv.vcf.gz" % OUT_DIR, family = FAMILIES),expand("%s/{family}/{family}.glnexus_denovo_actual.hc.vcf.gz" % OUT_DIR, family = FAMILIES), expand("%s/{family}/{family}.glnexus.family.combined_intersection_filtered_gq_{gq_val}_depth_{depth_val}_position.vcf" %OUT_DIR,family = FAMILIES,gq_val=GQ_VALUES,depth_val=DEPTH_VALUES)

rule grabFamilies_DV:
    output:  "%s/{family}/{family}.glnexus_denovo_actual.dv.vcf.gz" % OUT_DIR
    params:  prefix="{family}"
    shell: """
    export PATH=/opt/conda/bin:$PATH

    trio=$( grep {params.prefix} {FAMILY_FILE_comma} )
    trio=$( echo $trio | cut -d' ' -f 1 )
    echo $trio
    echo "Keep Samples DV"
    mkdir -p {OUT_DIR}/{params.prefix}
    #Grabs the trio from the GLnexus DeepVariant (DV) file, then compresses and creates an index
    bcftools view -Oz --threads 4 -s $trio {GLNEXUS_FILE_DV}/{params.prefix}.trio.glnexus.dv.vcf.gz  > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.dv.vcf.gz

    tabix {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.dv.vcf.gz


    echo "Naive search DV"
    #Searches family trio .vcf file for possible denovo varints, adding the label TRANSMITTED=no;INH=denovo_pro if the variant is a candidate.
    #It then pulls out the varints with that label into a separate .vcf file.

    python2 naive_inheritance_trio_py2.py  {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.dv.vcf.gz > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.dv.vcf
    grep '#' {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.dv.vcf > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.dv.vcf
    grep -w 'TRANSMITTED=no;INH=denovo_pro' {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.dv.vcf >> {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.dv.vcf
    bgzip {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.dv.vcf
    tabix {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.dv.vcf.gz

    ls {output}
    """

rule grabFamilies_HC:
    output:  "%s/{family}/{family}.glnexus_denovo_actual.hc.vcf.gz" % OUT_DIR
    params:  prefix="{family}"
    shell: """
    export PATH=/opt/conda/bin:$PATH
    mkdir -p {OUT_DIR}/{params.prefix}
    trio=$( grep {params.prefix} {FAMILY_FILE_comma} )
    trio=$( echo $trio | cut -d' ' -f 1 )
    echo $trio
    echo "Keep Samples HC"
    #Same steps as above, only with the HaplotypeCaller (HC) GLnexus output

    bcftools view -Oz --threads 4 -s $trio {GLNEXUS_FILE_HC}/{params.prefix}.trio.glnexus.hc.vcf.gz  > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.hc.vcf.gz

    tabix {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.hc.vcf.gz

    echo "Naive search HC"
    python2 naive_inheritance_trio_py2.py  {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.hc.vcf.gz > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.hc.vcf

    grep '#' {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.hc.vcf > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.hc.vcf
    grep -w 'TRANSMITTED=no;INH=denovo_pro' {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo.hc.vcf >> {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.hc.vcf
    bgzip {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.hc.vcf
    tabix {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.hc.vcf.gz

    """

rule combinedAndFilter:
    input: "%s/{family}/{family}.glnexus_denovo_actual.hc.vcf.gz" % OUT_DIR,"%s/{family}/{family}.glnexus_denovo_actual.dv.vcf.gz" % OUT_DIR
    output: "%s/{family}/{family}.glnexus.family.combined_intersection_filtered_gq_{gq_val}_depth_{depth_val}_position.vcf" % OUT_DIR
    params: prefix="{family}", gq="{gq_val}", depth="{depth_val}"
    shell:"""
    export PATH=/opt/conda/bin:$PATH
    #Filters out chromosomes that are not Chr1-22, grabbing variants with an allele count of 1, variants that were found from both DV and HC (defined as set=Intersection), and removes variants that are either 10 A's or T's in a row.
    echo "Combining files"
    java -Xmx15G -jar /GenomeAnalysisTK.jar -T CombineVariants -R {REFERENCE} -V:DeepVariant {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.dv.vcf.gz -V:GATK {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.hc.vcf.gz -o {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz -genotypeMergeOptions PRIORITIZE -priority DeepVariant,GATK

    tabix -f {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz

    echo "Filter for intersection"
    zcat {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz | grep '#' > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection.vcf
    zcat {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz | grep -v 'chrUn' | grep -v '_random' | grep -v '_alt'  | grep -v 'chrY' | grep -v 'chrM' | grep  'AC=1' | grep  'set=Intersection' | egrep -v 'AAAAAAAAAA|TTTTTTTTTT' >> {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection.vcf


    #Finds the order of the family position found within the combined .vcf file and what the order is in the family file (which should be in order of father, mother, child)
    echo 'Set up filter script'
    actual=$( cat {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection.vcf | grep '#' | tail -n 1 | cut -f 10-13 )
    echo $actual
    trio=$( grep {params.prefix} {FAMILY_FILE} )
    trio=$( echo $trio | cut -d' ' -f 1-3 )
    echo $trio
    echo "Run filter script"
    #Python script that filters for parents with no alt allele, depth of set value, GQ of set value, and allele balance of .25
    python filter_glnexuscombined.py {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection.vcf $trio $actual {params.gq} {params.depth}

    echo "Make position file"
    zcat {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz | grep '#' > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}_position.vcf
    echo "Make CpG file"
    zcat {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus_denovo_actual.combined.vcf.gz | grep '#' > {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}_position_all.vcf
    echo "Filter by position"
    bedtools intersect -v -a {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}.vcf -b {REGIONS}/LCR-hs38-5bp-buffer.bed.gz    {REGIONS}/hg38_centromeres_09252018.bed.gz  {REGIONS}/recent_repeat_b38-5bp-buffer.bed.gz  >> {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}_position.vcf
    bedtools intersect -a {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}_position.vcf -b {REGIONS}/CpG_sites_sorted_b38.bed.gz >> {OUT_DIR}/{params.prefix}/{params.prefix}.glnexus.family.combined_intersection_filtered_gq_{params.gq}_depth_{params.depth}_position_all.vcf
    ls {output}
    """
